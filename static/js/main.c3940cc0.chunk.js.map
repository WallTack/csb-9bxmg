{"version":3,"sources":["App.js","index.js"],"names":["prefix","App","price","setPrice","useState","priceHist","setPriceHist","time","setTime","Date","now","lastUpdate","setLastUpdate","isAlertAllowed","setIsAlertAllowed","updatePrice","async","neosResp","fetch","data","text","startN","search","endN","indexOf","length","neosData","slice","mintPrice","prevState","setTimeout","tick","useEffect","setInterval","className","md","map","prevPrice","index","style","display","minWidth","margin","humanizeDuration","round","size","onClick","msg","window","Notification","permission","requestPermission","then","alert","rootElement","document","getElementById","ReactDOM","render"],"mappings":"uNAYA,MACMA,EAAS,wCAGA,SAASC,IACtB,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAWC,GAAgBF,mBAAS,KACpCG,EAAMC,GAAWJ,mBAASK,KAAKC,QAC/BC,EAAYC,GAAiBR,mBAASK,KAAKC,QAC3CG,EAAgBC,GAAqBV,oBAAS,GAe/CW,EAAcC,UAClB,MAAMC,QAAiBC,MAzBV,8DA0BPC,QAAaF,EAASG,OACtBC,EAASF,EAAKG,OAAOtB,GACrBuB,EAAOJ,EAAKK,QA1BP,MA0BuBH,GA1BvB,MA0BwCI,OAC7CC,EAAWP,EAAKQ,MAAMN,EAAQE,GAC9BK,EAAYF,EAASC,MAAMD,EAASF,QAAQ,MAC9CtB,GAAS0B,IAAc1B,GACzBI,GAAcuB,GAAc,IAAIA,EAAWD,KAE7CzB,EAASyB,GACThB,EAAcH,KAAKC,OACnBoB,WAAWf,EAAa,MAEpBgB,EAAO,IAAMvB,EAAQC,KAAKC,OAKhC,OAJAsB,qBAAU,KACRjB,IACAkB,YAAYF,EAAM,OACjB,IAED,qBAAKG,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,eAAC,IAAD,CAAMD,UAAU,8BAAhB,UACE,cAAC,IAAD,UACE,8CAAiBhC,OAEnB,eAAC,IAAD,WACKG,EAAUoB,OACX,iEAEGpB,EAAU+B,KAAI,CAACC,EAAWC,IACzB,4BAAgBD,GAARC,QAIZ,wCAEF,oBAAGJ,UAAU,kBAAb,yBAEE,sBACEK,MAAO,CACLC,QAAS,eACTC,SAAU,OACVC,OAAQ,SAJZ,SAOGC,IAAiBpC,EAAOI,EAAY,CAAEiC,OAAO,MATlD,UAaE/B,GACA,qBAAKqB,UAAU,OAAf,SACE,cAAC,IAAD,CACEW,KAAK,KACLC,QAAS,KAtETC,QAwEI,4DAvEhB,iBAAkBC,OAEe,YAA5BC,aAAaC,YACtBpC,GAAkB,GAClB,IAAImC,aAAaF,IACoB,WAA5BE,aAAaC,YACtBD,aAAaE,oBAAoBC,MAAMF,IAClB,YAAfA,GACF,IAAID,aAAaF,MAPrBM,MAAM,wDAkEQ,2CCpFpB,MAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACzD,EAAD,MAEFqD,K","file":"static/js/main.c3940cc0.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport humanizeDuration from \"humanize-duration\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  Col,\n  Container,\n  Row\n} from \"reactstrap\";\nconst apiProxy = \"https://salty-ravine-55027.herokuapp.com/https://neos.com/\";\nconst prefix = /<p>NCR minting price:<\\/p>\\s+<h4 alt=/;\nconst suffix = \" = \";\n\nexport default function App() {\n  const [price, setPrice] = useState(\"\");\n  const [priceHist, setPriceHist] = useState([]);\n  const [time, setTime] = useState(Date.now());\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n  const [isAlertAllowed, setIsAlertAllowed] = useState(false);\n  const notifyUser = (msg) => {\n    if (!(\"Notification\" in window)) {\n      alert(\"This browser does not support desktop notifications\");\n    } else if (Notification.permission === \"granted\") {\n      setIsAlertAllowed(true);\n      new Notification(msg);\n    } else if (Notification.permission !== \"denied\") {\n      Notification.requestPermission().then((permission) => {\n        if (permission === \"granted\") {\n          new Notification(msg);\n        }\n      });\n    }\n  };\n  const updatePrice = async () => {\n    const neosResp = await fetch(apiProxy);\n    const data = await neosResp.text();\n    const startN = data.search(prefix);\n    const endN = data.indexOf(suffix, startN) - suffix.length;\n    const neosData = data.slice(startN, endN);\n    const mintPrice = neosData.slice(neosData.indexOf(\"$\"));\n    if (price && mintPrice !== price) {\n      setPriceHist((prevState) => [...prevState, mintPrice]);\n    }\n    setPrice(mintPrice);\n    setLastUpdate(Date.now());\n    setTimeout(updatePrice, 30000);\n  };\n  const tick = () => setTime(Date.now());\n  useEffect(() => {\n    updatePrice();\n    setInterval(tick, 1000);\n  }, []);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row className=\"text-center\">\n          <Col md=\"12\">\n            <Card className=\"mt-5 p-3 bg-dark text-light\">\n              <CardTitle>\n                <h1>Mint Price: {price}</h1>\n              </CardTitle>\n              <CardBody>\n                {!!priceHist.length ? (\n                  <div>\n                    Price history since page load:\n                    {priceHist.map((prevPrice, index) => (\n                      <p key={index}>{prevPrice}</p>\n                    ))}\n                  </div>\n                ) : (\n                  \"Price has not changed since page load\"\n                )}\n                <p className=\"text-muted mt-2\">\n                  Last updated\n                  <span\n                    style={{\n                      display: \"inline-block\",\n                      minWidth: \"70px\",\n                      margin: \"0 4px\"\n                    }}\n                  >\n                    {humanizeDuration(time - lastUpdate, { round: true })}\n                  </span>\n                  ago\n                </p>\n                {!isAlertAllowed && (\n                  <div className=\"mt-5\">\n                    <Button\n                      size=\"md\"\n                      onClick={() => {\n                        notifyUser(\n                          \"You'll be notified like this when NCR mint price changes.\"\n                        );\n                      }}\n                    >\n                      Enable alerts\n                    </Button>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.min.css\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}