{"version":3,"sources":["LoadingSpinner.js","App.js","index.js"],"names":["LoadingSpinner","props","className","isAbsolute","isEnabled","htmlParser","DOMParser","App","icoData","setIcoData","useState","priceHist","setPriceHist","time","setTime","Date","now","lastUpdate","setLastUpdate","isAlertAllowed","setIsAlertAllowed","isUpdating","setIsUpdating","updatePrice","async","neosResp","fetch","neosHtml","text","data","parseFromString","getElementById","querySelector","querySelectorAll","reduce","mapArr","article","childElementCount","articleData","header","firstElementChild","textContent","trim","content","lastElementChild","document","title","length","push","console","log","setTimeout","tick","useEffect","setInterval","md","map","row","rowIndex","category","index","style","display","minWidth","margin","humanizeDuration","round","size","onClick","msg","window","Notification","permission","requestPermission","then","alert","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.1cf18a61.chunk.js","sourcesContent":["const LoadingSpinner = (props) => {\r\n  return (\r\n    <div\r\n      className={`sk-cube-grid ${props.isAbsolute ? \"absolute\" : \"\"} ${\r\n        props.isEnabled ? \"enabled\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"sk-cube sk-cube1\"></div>\r\n      <div className=\"sk-cube sk-cube2\"></div>\r\n      <div className=\"sk-cube sk-cube3\"></div>\r\n      <div className=\"sk-cube sk-cube4\"></div>\r\n      <div className=\"sk-cube sk-cube5\"></div>\r\n      <div className=\"sk-cube sk-cube6\"></div>\r\n      <div className=\"sk-cube sk-cube7\"></div>\r\n      <div className=\"sk-cube sk-cube8\"></div>\r\n      <div className=\"sk-cube sk-cube9\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport humanizeDuration from \"humanize-duration\";\nimport { Button, Card, CardBody, Col, Container, Row } from \"reactstrap\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nconst apiProxy = \"https://salty-ravine-55027.herokuapp.com/https://neos.com/\";\nconst htmlParser = new DOMParser();\nconst updateInterval = 40000;\n\nexport default function App() {\n  const [icoData, setIcoData] = useState([]);\n  const [priceHist, setPriceHist] = useState(null);\n  const [time, setTime] = useState(Date.now());\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n  const [isAlertAllowed, setIsAlertAllowed] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const notifyUser = (msg) => {\n    if (!(\"Notification\" in window)) {\n      alert(\"This browser does not support desktop notifications\");\n    } else if (Notification.permission === \"granted\") {\n      setIsAlertAllowed(true);\n      new Notification(msg);\n    } else if (Notification.permission !== \"denied\") {\n      Notification.requestPermission().then((permission) => {\n        if (permission === \"granted\") {\n          new Notification(msg);\n        }\n      });\n    }\n  };\n  const updatePrice = async () => {\n    setIsUpdating(true);\n    const neosResp = await fetch(apiProxy);\n    const neosHtml = await neosResp.text();\n    const doc = htmlParser.parseFromString(neosHtml, \"text/html\");\n    const icoSect = doc.getElementById(\"ico\");\n    const innerIco = icoSect.querySelector(\".row > div > .row\");\n    const data = [...innerIco.querySelectorAll(\"article\")].reduce(\n      (mapArr, article) => {\n        if (article?.childElementCount !== 2) return mapArr;\n        const articleData = {\n          header: article.firstElementChild.textContent.trim(),\n          content: article.lastElementChild.textContent.trim()\n        };\n        if (articleData.header === \"NCR minting price:\") {\n          document.title = articleData.content;\n        }\n        if (\n          !mapArr[mapArr.length - 1] ||\n          mapArr[mapArr.length - 1].length > 1\n        ) {\n          mapArr.push([articleData]);\n        } else {\n          mapArr[mapArr.length - 1].push(articleData);\n        }\n        return mapArr;\n      },\n      []\n    );\n    console.log(data);\n    if (icoData.length && icoData[0].content !== data[0]?.content) {\n      setPriceHist(Date.now());\n    }\n    setIcoData(data);\n    setLastUpdate(Date.now());\n    setIsUpdating(false);\n    setTimeout(updatePrice, updateInterval);\n  };\n  const tick = () => setTime(Date.now());\n  useEffect(() => {\n    updatePrice();\n    setInterval(tick, 1000);\n  }, []);\n  return (\n    <div className=\"App\">\n      <Container className=\"pb-5 oxy-light\">\n        <Row className=\"text-center\">\n          <Col md=\"12\">\n            <Card className=\"mt-5 p-3 text-light shadow main-card\">\n              <CardBody>\n                <LoadingSpinner isAbsolute isEnabled={isUpdating} />\n                {!!icoData.length &&\n                  icoData.map((row, rowIndex) => (\n                    <Row key={rowIndex} className=\"ico-row\">\n                      {row.map((category, index) => (\n                        <Col key={index} className=\"md-6 sm-12\">\n                          <h5>{category.header}</h5>\n                          <p>{category.content}</p>\n                        </Col>\n                      ))}\n                    </Row>\n                  ))}\n                {!!icoData.length && (\n                  <p className=\"text-muted mt-2\">\n                    Last updated\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        minWidth: \"72px\",\n                        margin: \"0 4px\"\n                      }}\n                    >\n                      {humanizeDuration(time - lastUpdate, { round: true })}\n                    </span>\n                    ago\n                  </p>\n                )}\n                {!!priceHist\n                  ? `Mint price last changed ${humanizeDuration(\n                      time - priceHist,\n                      {\n                        round: true\n                      }\n                    )} ago`\n                  : !!icoData.length &&\n                    \"Mint price has not changed since page load\"}\n                {!!icoData.length && !isAlertAllowed && (\n                  <div className=\"mt-5\">\n                    <Button\n                      size=\"md\"\n                      className=\"oxy-light\"\n                      onClick={() => {\n                        notifyUser(\n                          \"You'll be notified like this when NCR mint price changes.\"\n                        );\n                      }}\n                    >\n                      Enable alerts\n                    </Button>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n      <footer className=\"text-center text-muted mt-5 oxy-light\">\n        <p>WallTack#0001</p>\n      </footer>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.min.css\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}